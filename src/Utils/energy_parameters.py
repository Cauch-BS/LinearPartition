import jax.numpy as jnp
import numpy as np

TerminalU = 50
log_mult = 107.856
VIE_INF = 10**7

triloops = {'CAACG':680, 'GUUAC':690}
tetraloops = {
    "CAACGG": 550,
    "CCAAGG": 330,
    "CCACGG": 370,
    "CCCAGG": 340,
    "CCGAGG": 350,
    "CCGCGG": 360,
    "CCUAGG": 370,
    "CCUCGG": 250,
    "CUAAGG": 360,
    "CUACGG": 280,
    "CUCAGG": 370,
    "CUCCGG": 270,
    "CUGCGG": 280,
    "CUUAGG": 350,
    "CUUCGG": 370,
    "CUUUGG": 370
}
hexaloops = {'ACAGUACU': 280,
             'ACAGUGAU': 360,
             'ACAGUGCU': 290,
             'ACAGUGUU': 320}

stacks = jnp.full((8, 8), VIE_INF).at[1:, 1:].set(jnp.array([
#   [CG,    GC,     GU,    UG,    AU,   UA,     NN]
    [-240,  -330,  -210,  -140,  -210,  -210,  -140], #CG
    [-330,  -340,  -250,  -150,  -220,  -240,  -150], #GC
    [-210,  -250,   130,   -50,  -140,  -130,   130], #GU
    [-140,  -150,   -50,    30,   -60,  -100,    30], #UG
    [-210,  -220,  -140,   -60,  -110,   -90,   -60], #AU
    [-210,  -240,  -130,  -100,   -90,  -130,   -90], #UA
    [-140,  -150,   130,    30,   -60,   -90,   130]  #NN 
    ]))

#HAIRPINS, BULGES AND INTERNAL LOOPS LONGER THAN 30 ARE CONSIDERED SEPERATELY

hairpins = jnp.array([ # array of length 31
    VIE_INF,  VIE_INF,  VIE_INF,  # --> Hairpins shorter than 3 are not allowed
    540,   560,   570,   540,   600,   550,   640,   650,   660,   670,   680,   690,   690,   700,   710,   710,   720,   720,   730,   730,   740,   740,   750,   750,   750,   760,   760,   770
])
bulges = jnp.array([ # array of length 31
    VIE_INF,   # Bulges are larger than 0
    380,   280,   320,   360,   400,   440,   460,   470,   480,   490,   500,   510,   520,   530,   540,   540,   550,   550,   560,   570,   570,   580,   580,   580,   590,   590,   600,   600,   600,   610
])

internal_loop = jnp.array([ # for 1 * n loops (1 * 1 and 1 * 2 loops are considered seperately)
    VIE_INF,  VIE_INF, # Internal loops are larger than 1
    100,   100,   110,   200,   200,   210,   230,   240,   250,   260,   270,   280,   290,   290,   300,   310,   310,   320,   330,   330,   340,   340,   350,   350,   350,   360,   360,   370,   370
])

## we consider internal loops here ##

max_internal = 300
internal_mult = 60

in_loop_1x1 = jnp.array(np.load('in_loop_1x1.npy'))
in_loop_2x1 = jnp.array(np.load('in_loop_2x1.npy'))
in_loop_2x2 = jnp.array(np.load('in_loop_2x2.npy'))

################# 5'XY...ZW3' -> Contribution of X=Y and mismatched Z, W to Free Energy #################

internal_match = jnp.full(
    shape = (8, 5, 5),
    fill_value = VIE_INF
).at[1:].set(
    jnp.array([
        # if ends of internal loop are 5'-CX...XG-3' (typ = 1)
        [
        #5'X   A     C     G       U        N       #3'X
            [     0,     0,     0,     0,     0],   #3' A
            [     0,     0,     0,   -80,     0],   #3' C
            [     0,     0,     0,     0,     0],   #3' G
            [     0,  -100,     0,  -100,     0],   #3' U
            [     0,     0,     0,     0,   -60]    #3' N
        ],
        # if end of internal loop is 5'-GX...XC-3' (typ = 2)
        [
        #5'X   A     C     G       U        N       #3'X
            [     0,     0,     0,     0,     0] ,  #3' A
            [     0,     0,     0,   -80,     0] ,  #3' C
            [     0,     0,     0,     0,     0] ,  #3' G
            [     0,  -100,     0,  -100,     0] ,  #3' U
            [     0,     0,     0,     0,   -60]    #3' N
        ],
        # if end of hairpin is 5'-GX...XU-3' (typ = 3)
        [
        #5'X   A     C     G       U        N       #3'X
            [    70,    70,    70,    70,    70],   #3' A
            [    70,    70,    70,   -10,    70],   #3' C
            [    70,    70,    70,    70,    70],   #3' G
            [    70,   -30,    70,   -30,    70],   #3' U
            [    70,    70,    70,    70,    10]    #3' N
        ],
        # if end of hairpin is 5'-UX...XG-3' (typ = 4)
        [
        #5'X   A     C     G       U        N       #3'X
            [    70,    70,    70,    70,    70],   #3' A
            [    70,    70,    70,   -10,    70],   #3' C
            [    70,    70,    70,    70,    70],   #3' G
            [    70,   -30,    70,   -30,    70],   #3' U
            [    70,    70,    70,    70,    10]    #3' N
        ],
        # if end of hairpin is 5'-AX ... XU-3' (typ = 5)
        [
        #5'X   A     C     G       U        N       #3'X
            [    70,    70,    70,   -10,    70],   #3' A
            [    70,    70,    70,    70,    70],   #3' C
            [    70,    70,    70,    70,    70],   #3' G
            [    70,   -30,    70,   -30,    70],   #3' U
            [    70,    70,    70,    70,    10]    #3' N
        ],
        # if end of hairpin is 5'-UX ... XA-3' (typ = 6)
        [ 
        #5'X   A     C     G       U        N       #3'X
            [    70,    70,    70,    70,    70],   #3' A
            [    70,    70,    70,   -10,    70],   #3' C
            [    70,    70,    70,    70,    70],   #3' G
            [    70,   -30,    70,   -30,    70],   #3' U
            [    70,    70,    70,    70,    10]    #3' N

        ],
        # if end of hairpin is 5'-NX ... XN-3' (typ = 7)
        [
        #5'X   A     C     G       U        N       #3'X
            [    70,    70,    70,    70,    70],   #3' A
            [    70,    70,    70,   -10,    70],   #3' C
            [    70,    70,    70,    70,    70],   #3' G
            [    70,   -30,    70,   -30,    70],   #3' U
            [    70,    70,    70,    70,    10]    #3' N
        ]
    ])
)

internal_1xn_correction =jnp.full(
    shape = (8, 5, 5),
    fill_value = VIE_INF
).at[1:].set(
    jnp.array([

    ])
)

internal_2x3_correction = jnp.full(
    shape = (8, 5, 5),
    fill_value = VIE_INF
).at[1:].set(
    jnp.array([
        [
            [     0,     0,     0,     0,     0],
            [     0,     0,     0,   -50,     0],
            [     0,     0,     0,     0,     0],
            [     0,  -110,     0,   -70,     0],
            [     0,     0,     0,     0,   -30]
        ],
        
        [
        
        #5'X   A     C     G       U        N       #3'X
            [     0,     0,     0,     0,     0],   #3' A
            [     0,     0,     0,     0,     0],   #3' C
            [     0,     0,     0,     0,     0],   #3' G
            [     0,  -120,     0,   -70,     0],   #3' U
            [     0,     0,     0,     0,   -30]    #3' N
        ]

        ,[[    70,    70,    70,    70,    70]
        ,[    70,    70,    70,    70,    70]
        ,[    70,    70,    70,    70,    70]
        ,[    70,   -40,    70,     0,    70]
        ,[    70,    70,    70,    70,    40]
        ]
        ,[[    70,    70,    70,    70,    70]
        ,[    70,    70,    70,    20,    70]
        ,[    70,    70,    70,    70,    70]
        ,[    70,   -40,    70,     0,    70]
        ,[    70,    70,    70,    70,    40]
        ]
        ,[[    70,    70,    70,    70,    70]
        ,[    70,    70,    70,    70,    70]
        ,[    70,    70,    70,    70,    70]
        ,[    70,   -40,    70,     0,    70]
        ,[    70,    70,    70,    70,    40]
        ]
        ,[[    70,    70,    70,    70,    70]
        ,[    70,    70,    70,    20,    70]
        ,[    70,    70,    70,    70,    70]
        ,[    70,   -40,    70,     0,    70]
        ,[    70,    70,    70,    70,    40]
        ]
        ,[[    70,    70,    70,    70,    70]
        ,[    70,    70,    70,    70,    70]
        ,[    70,    70,    70,    70,    70]
        ,[    70,   -40,    70,     0,    70]
        ,[    70,    70,    70,    70,    40]
        ]
    ])
)

### END OF INTERNAL LOOP ###

hairpin_match = jnp.full(
    shape = (8, 5, 5),
    fill_value = VIE_INF
).at[1:].set(
    jnp.array([
        # if ends of hairpin are 5'-CX...XG-3' (typ = 1)
        [
        #5'X   A     C     G       U        N       #3'X
            [-80,  -100,  -110,  -100,     -80],    #3' A
            [-140,  -150,  -150,  -140,   -150],    #3' C
            [-80,  -100,  -110,  -100,     -80],    #3' G
            [ -150,  -230,  -150,  -240,  -150],    #3' U
            [ -100,  -100,  -140,  -100,  -210]     #3' N
        ],
        # if end of hairpin is 5'-GX...XC-3' (typ = 2)
        [
        #5'X   A     C     G       U        N       #3'X
            [   -50,  -110,   -70,  -110,   -50] ,  #3' A
            [  -110,  -110,  -150,  -130,  -150] ,  #3' C
            [   -50,  -110,   -70,  -110,   -50] ,  #3' G
            [  -150,  -250,  -150,  -220,  -150] ,  #3' U
            [  -100,  -110,  -100,  -110,  -160]    #3' N
        ],
        # if end of hairpin is 5'-GX...XU-3' (typ = 3)
        [
        #5'X   A     C     G       U        N       #3'X
            [   20,    20,   -20,   -10,    -20],   #3' A
            [    20,    20,   -50,   -30,   -50],   #3' C
            [   -10,   -10,   -20,   -10,   -20],   #3' G
            [   -50,  -100,   -50,  -110,   -50],   #3' U
            [   -10,   -10,   -30,   -10,  -100]    #3' N
        ],
        # if end of hairpin is 5'-UX...XG-3' (typ = 4)
        [
        #5'X   A     C     G       U        N       #3'X
            [     0,   -20,   -10,   -20,     0],   #3' A
            [  -30,   -50,   -30,   -60,    -30],   #3' C
            [     0,   -20,   -10,   -20,     0],   #3' G
            [   -30,   -90,   -30,  -110,   -30],   #3' U
            [   -10,   -20,   -10,   -20,   -90]    #3' N
        ],
        # if end of hairpin is 5'-AX ... XU-3' (typ = 5)
        [
        #5'X   A     C     G       U        N       #3'X
            [  -10,   -10,   -20,   -10,    -20],   #3' A
            [   -30,   -30,   -50,   -30,   -50],   #3' C
            [   -10,   -10,   -20,   -10,   -20],   #3' G
            [   -50,  -120,   -50,  -110,   -50],   #3' U
            [   -10,   -10,   -30,   -10,  -120]    #3' N
        ],
        # if end of hairpin is 5'-UX ... XA-3' (typ = 6)
        [ 
        #5'X   A     C     G       U        N       #3'X
            [  0,   -20,   -10,   -20,        0],   #3' A
            [  -30,   -50,   -30,   -50,    -30],   #3' C
            [   0,   -20,   -10,   -20,       0],   #3' G
            [   -30,  -150,   -30,  -150,   -30],   #3' U
            [   -10,   -20,   -10,   -20,   -90]    #3' N

        ],
        # if end of hairpin is 5'-NX ... XN-3' (typ = 7)
        [
        #5'X   A     C     G       U        N       #3'X
            [    20,    20,   -10,   -10,     0],   #3' A
            [    20,    20,   -30,   -30,   -30],   #3' C
            [     0,   -10,   -10,   -10,     0],   #3' G
            [   -30,   -90,   -30,  -110,   -30],   #3' U
            [   -10,   -10,   -10,   -10,   -90]    #3' N
        ]
    ])
)

multiloop_match = jnp.full(
    shape = (8, 5, 5),
    fill_value = VIE_INF
).at[1:].set(
    jnp.array([
        # if ends of multiloop are 5'-GX...XC-3' (typ = 1)
        [
        #5'X   A     C     G       U        N       #3'X
            [   -50,  -110,   -50,  -140,   -70],   #3' A
            [  -110,  -110,  -110,  -160,  -110],   #3' C
            [   -70,  -150,   -70,  -150,  -100],   #3' G
            [  -110,  -130,  -110,  -140,  -110],   #3' U
            [   -50,  -150,   -50,  -150,   -70]    #3' N
        ],
        # if end of multiloop is 5'-GX...XC-3' (typ = 2)
        [
        #5'X   A     C     G       U        N       #3'X
            [ -80,  -140,   -80,  -140,  -100] ,    #3' A
            [-100,  -150,  -100,  -140,  -100] ,    #3' C
            [-110,  -150,  -110,  -150,  -140] ,    #3' G
            [-100,  -140,  -100,  -160,  -100] ,    #3' U
            [ -80,  -150,   -80,  -150,  -120]      #3' N
        ],
        # if end of multiloop is 5'-GX...XU-3' (typ = 3)
        [
        #5'X   A     C     G       U        N       #3'X
            [   -50,   -80,   -50,   -50,   -50],   #3' A
            [   -50,  -100,   -70,   -50,   -70],   #3' C
            [   -60,   -80,   -60,   -80,   -60],   #3' G
            [   -70,  -110,   -70,   -80,   -70],   #3' U
            [   -50,   -80,   -50,   -80,   -50]    #3' N
        ],
        # if end of multiloop is 5'-UX...XG-3' (typ = 4)
        [
        #5'X   A     C     G       U        N       #3'X
            [   -30,   -30,   -60,   -60,   -60],   #3' A
            [   -30,   -30,   -60,   -60,   -60],   #3' C
            [   -70,  -100,   -70,  -100,   -80],   #3' G
            [   -60,   -80,   -60,   -80,   -60],   #3' U
            [   -60,  -100,   -70,  -100,   -60]    #3' N
        ],
        # if end of multioop is 5'-AX ... XU-3' (typ = 5)
        [
        #5'X   A     C     G       U        N       #3'X
            [   -50,   -80,   -50,   -80,   -50],   #3' A
            [   -70,  -100,   -70,  -110,   -70],   #3' C
            [   -60,   -80,   -60,   -80,   -60],   #3' G
            [   -70,  -110,   -70,  -120,   -70],   #3' U
            [   -50,   -80,   -50,   -80,   -50]    #3' N
        ],
        # if end of multiloop is 5'-UX ... XA-3' (typ = 6)
        [ 
        #5'X   A     C     G       U        N       #3'X
            [   -60,   -80,   -60,   -80,   -60],   #3' A
            [   -60,   -80,   -60,   -80,   -60],   #3' C
            [   -70,  -100,   -70,  -100,   -80],   #3' G
            [   -60,   -80,   -60,   -80,   -60],   #3' U
            [   -70,  -100,   -70,  -100,   -80]    #3' N

        ],
        # if end of multiloop is 5'-NX ... XN-3' (typ = 7)
        [
        #5'X   A     C     G       U        N       #3'X
            [   -30,   -30,   -50,   -50,   -50],   #3' A
            [   -30,   -30,   -60,   -50,   -60],   #3' C
            [   -60,   -80,   -60,   -80,   -60],   #3' G
            [   -60,   -80,   -60,   -80,   -60],   #3' U
            [   -50,   -80,   -50,   -80,   -50]    #3' N
        ]
    ])
)

exterior_match =jnp.full(
    shape = (8, 5, 5),
    fill_value = VIE_INF
).at[1:].set(
    jnp.array([
        [
        #ends are 5'-XG...CX-3' (typ = 1)
        #3'X   A     C     G       U        N       #5'X
            [   -50,  -110,   -50,  -140,   -70],   #3' A
            [  -110,  -110,  -110,  -160,  -110],   #3' C
            [   -70,  -150,   -70,  -150,  -100],   #3' G
            [  -110,  -130,  -110,  -140,  -110],   #3' U
            [   -50,  -150,   -50,  -150,   -70]    #3' N
        ],
        [
        #ends are 5'-XC...GX-3' (typ = 2) 
        #3'X   A     C     G       U        N       #5'X
            [   -80,  -140,   -80,  -140,  -100],   #3' A
            [  -100,  -150,  -100,  -140,  -100],   #3' C
            [  -110,  -150,  -110,  -150,  -140],   #3' G
            [  -100,  -140,  -100,  -160,  -100],   #3' U
            [   -80,  -150,   -80,  -150,  -120]    #3' N
        ],
        [ 
        #ends are 5'-XU...GX-3' (typ = 3)
        #3'X   A     C     G       U        N       #5'X
            [   -50,   -80,   -50,   -50,   -50],   #3' A
            [   -50,  -100,   -70,   -50,   -70],   #3' C
            [   -60,   -80,   -60,   -80,   -60],   #3' G
            [   -70,  -110,   -70,   -80,   -70],   #3' U
            [   -50,   -80,   -50,   -80,   -50]    #3' N
        ],
        [ 
        #ends are 5'-XG...UX-3' (typ = 4)
        #3'X   A     C     G       U        N       #5'X
            [   -30,   -30,   -60,   -60,   -60],   #3' A
            [   -30,   -30,   -60,   -60,   -60],   #3' C
            [   -70,  -100,   -70,  -100,   -80],   #3' G
            [   -60,   -80,   -60,   -80,   -60],   #3' U
            [   -60,  -100,   -70,  -100,   -60]    #3' N
        ],
        [ 
        #ends are 5'-XU...AX-3' (typ = 5)
        #3'X   A     C     G       U        N       #5'X
            [   -50,   -80,   -50,   -80,   -50],   #3' A
            [   -70,  -100,   -70,  -110,   -70],   #3' C
            [   -60,   -80,   -60,   -80,   -60],   #3' G
            [   -70,  -110,   -70,  -120,   -70],   #3' U
            [   -50,   -80,   -50,   -80,   -50]    #3' N
        ],
        [ 
        #ends are 5'-XA...UX-3' (typ = 6)
        #3'X   A     C     G       U        N       #5'X
            [   -60,   -80,   -60,   -80,   -60],   #3' A
            [   -60,   -80,   -60,   -80,   -60],   #3' C
            [   -70,  -100,   -70,  -100,   -80],   #3' G
            [   -60,   -80,   -60,   -80,   -60],   #3' U
            [   -70,  -100,   -70,  -100,   -80]    #3' N
        ],
        [ 
        #ends are 5'-XN...XN-3' (typ = 7)
        #3'X   A     C     G       U        N       #5'X
            [   -30,   -30,   -50,   -50,   -50],   #3' A
            [   -30,   -30,   -60,   -50,   -60],   #3' C
            [   -60,   -80,   -60,   -80,   -60],   #3' G
            [   -60,   -80,   -60,   -80,   -60],   #3' U
            [   -50,   -80,   -50,   -80,   -50]    #3' N
        ]
    ])
)